name: Release Candidate

on:
  push:
    #branches: [ "main" ]
  pull_request:
    #branches: [ "main" ]

jobs:
  package:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Package
        run: dotnet dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained false -c Release --output ./forza/devrel
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ForzaDSX-RC
          path: ./forza/devrel
        continue-on-error: true
      - name: Delete Previous Release
        uses: cosmii02/delete-previous-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Pre-Release
        id: create_release
        uses: cosmii02/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest-candidate-${{ github.run_number }}-${{ github.run_id }}
          name: Release-Candidate-${{ github.run_number }}-${{ github.run_id }}
          prerelease: true
      - name: Get Release ID
        id: get_release_id
        run: echo "::set-output name=id::$(echo '${{ steps.create_release.outputs.id }}')"
        shell: bash
      - name: Upload Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const release_id = ${{ steps.get_release_id.outputs.id }};
          const artifact_path = './forza/devrel/ForzaDSX-RC';
          const { data: upload } = await octokit.repos.uploadReleaseAsset({
            owner: process.env.GITHUB_REPOSITORY_OWNER,
            repo: process.env.GITHUB_REPOSITORY,
            release_id: release_id,
            name: 'ForzaDSX-RC',
            data: require('fs').readFileSync(artifact_path),
            headers: {
              'content-type': 'application/octet-stream',
              'content-length': require('fs').statSync(artifact_path).size
            }
          });
